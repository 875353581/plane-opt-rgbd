!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	plane-opt/mesh_partition/heap/stdmix.h	47;"	d
ARRAY_ALLOC_INPLACE	plane-opt/mesh_partition/heap/MxBlock.h	/^    ARRAY_ALLOC_INPLACE$/;"	e	enum:_array_alloc_policy
AssertBound	plane-opt/mesh_partition/heap/stdmix.h	101;"	d
AssertBound	plane-opt/mesh_partition/heap/stdmix.h	104;"	d
Axis	plane-opt/mesh_partition/heap/stdmix.h	/^enum Axis {X=0, Y=1, Z=2, W=3};$/;"	g
CAREFUL	plane-opt/mesh_partition/heap/stdmix.h	86;"	d
CAREFUL	plane-opt/mesh_partition/heap/stdmix.h	89;"	d
COVARIANCE	plane-opt/mesh_partition/covariance.h	2;"	d
Cluster	plane-opt/mesh_partition/partition.h	/^        Cluster() : energy(0) {}$/;"	f	struct:Partition::Cluster
Cluster	plane-opt/mesh_partition/partition.h	/^    struct Cluster$/;"	s	class:Partition
CovObj	plane-opt/mesh_partition/covariance.cpp	/^CovObj::CovObj()$/;"	f	class:CovObj
CovObj	plane-opt/mesh_partition/covariance.cpp	/^CovObj::CovObj(const Vector3d &v1, const Vector3d &v2, const Vector3d &v3)$/;"	f	class:CovObj
CovObj	plane-opt/mesh_partition/covariance.h	/^class CovObj$/;"	c
Edge	plane-opt/mesh_partition/partition.h	/^        Edge(int a, int b) : v1(a), v2(b) {}$/;"	f	struct:Partition::Edge
Edge	plane-opt/mesh_partition/partition.h	/^    struct Edge : public MxHeapable$/;"	s	class:Partition
FEQ	plane-opt/mesh_partition/heap/gfx.h	/^inline bool  FEQ(double a, double b, double e=FEQ_EPS)  {return fabs(a-b)<e;}$/;"	f
FEQ2	plane-opt/mesh_partition/heap/gfx.h	/^inline bool FEQ2(double a, double b, double e=FEQ_EPS2) {return fabs(a-b)<e;}$/;"	f
FEQ_EPS	plane-opt/mesh_partition/heap/gfx.h	/^const double FEQ_EPS = 1e-6;$/;"	v
FEQ_EPS2	plane-opt/mesh_partition/heap/gfx.h	/^const double FEQ_EPS2 = 1e-12;$/;"	v
Face	plane-opt/mesh_partition/partition.h	/^        Face() : cluster_id(-1), is_visited(false) {}$/;"	f	struct:Partition::Face
Face	plane-opt/mesh_partition/partition.h	/^    struct Face$/;"	s	class:Partition
GFX_INCLUDED	plane-opt/mesh_partition/heap/gfx.h	2;"	d
HAVE_BOOL	plane-opt/mesh_partition/heap/config-vc.h	9;"	d
HAVE_CASTING_LIMITS	plane-opt/mesh_partition/heap/config-vc.h	78;"	d
HAVE_FLTK	plane-opt/mesh_partition/heap/config-vc.h	43;"	d
HAVE_FLTK_GL	plane-opt/mesh_partition/heap/config-vc.h	46;"	d
HAVE_GL_GLEXT_H	plane-opt/mesh_partition/heap/config-vc.h	69;"	d
HAVE_GL_WGLEXT_H	plane-opt/mesh_partition/heap/config-vc.h	75;"	d
HAVE_LIBJPEG	plane-opt/mesh_partition/heap/config-vc.h	55;"	d
HAVE_LIBPNG	plane-opt/mesh_partition/heap/config-vc.h	52;"	d
HAVE_LIBTIFF	plane-opt/mesh_partition/heap/config-vc.h	49;"	d
HAVE_OPENGL	plane-opt/mesh_partition/heap/config-vc.h	60;"	d
HAVE_POLYOFFSET	plane-opt/mesh_partition/heap/config-vc.h	66;"	d
HAVE_SSTREAM	plane-opt/mesh_partition/heap/config-vc.h	37;"	d
HAVE_VALARRAY	plane-opt/mesh_partition/heap/config-vc.h	34;"	d
HUGE	plane-opt/mesh_partition/heap/gfx.h	56;"	d
MAX	plane-opt/mesh_partition/heap/gfx.h	45;"	d
MAX	plane-opt/mesh_partition/heap/gfx.h	48;"	d
MAX	plane-opt/mesh_partition/heap/stdmix.h	40;"	d
MAX	plane-opt/mesh_partition/heap/stdmix.h	44;"	d
MIN	plane-opt/mesh_partition/heap/gfx.h	44;"	d
MIN	plane-opt/mesh_partition/heap/gfx.h	47;"	d
MIN	plane-opt/mesh_partition/heap/stdmix.h	37;"	d
MIN	plane-opt/mesh_partition/heap/stdmix.h	43;"	d
MIXMSG_INCLUDED	plane-opt/mesh_partition/heap/mixmsg.h	2;"	d
MXBLOCK_INCLUDED	plane-opt/mesh_partition/heap/MxBlock.h	2;"	d
MXDYNBLOCK_INCLUDED	plane-opt/mesh_partition/heap/MxDynBlock.h	2;"	d
MXHEAP_H	plane-opt/mesh_partition/myheap.h	35;"	d
MXHEAP_INCLUDED	plane-opt/mesh_partition/heap/MxHeap.h	2;"	d
MXID_NIL	plane-opt/mesh_partition/heap/stdmix.h	23;"	d
MXMSG_ASSERT	plane-opt/mesh_partition/heap/mixmsg.h	/^    MXMSG_ASSERT,$/;"	e	enum:MxSeverityLevel
MXMSG_DEBUG	plane-opt/mesh_partition/heap/mixmsg.h	/^    MXMSG_DEBUG,$/;"	e	enum:MxSeverityLevel
MXMSG_ERROR	plane-opt/mesh_partition/heap/mixmsg.h	/^    MXMSG_ERROR,$/;"	e	enum:MxSeverityLevel
MXMSG_FATAL	plane-opt/mesh_partition/heap/mixmsg.h	/^    MXMSG_FATAL = 0,$/;"	e	enum:MxSeverityLevel
MXMSG_NOTE	plane-opt/mesh_partition/heap/mixmsg.h	/^    MXMSG_NOTE,$/;"	e	enum:MxSeverityLevel
MXMSG_TRACE	plane-opt/mesh_partition/heap/mixmsg.h	/^    MXMSG_TRACE$/;"	e	enum:MxSeverityLevel
MXMSG_WARN	plane-opt/mesh_partition/heap/mixmsg.h	/^    MXMSG_WARN,$/;"	e	enum:MxSeverityLevel
M_PI	plane-opt/mesh_partition/heap/gfx.h	52;"	d
MxBlock	plane-opt/mesh_partition/heap/MxBlock.h	/^    MxBlock() {}$/;"	f	class:MxBlock
MxBlock	plane-opt/mesh_partition/heap/MxBlock.h	/^    MxBlock(int n) { init_block(n); }$/;"	f	class:MxBlock
MxBlock	plane-opt/mesh_partition/heap/MxBlock.h	/^class MxBlock$/;"	c
MxDynBlock	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    MxDynBlock(int n = 2) : MxBlock<T>(n) { fill = 0; }$/;"	f	class:MxDynBlock
MxDynBlock	plane-opt/mesh_partition/heap/MxDynBlock.h	/^class MxDynBlock : public MxBlock<T>$/;"	c
MxHeap	plane-opt/mesh_partition/heap/MxHeap.h	/^    MxHeap() : MxDynBlock<MxHeapable *>(8) {}$/;"	f	class:MxHeap
MxHeap	plane-opt/mesh_partition/heap/MxHeap.h	/^    MxHeap(unsigned int n) : MxDynBlock<MxHeapable *>(n) {}$/;"	f	class:MxHeap
MxHeap	plane-opt/mesh_partition/heap/MxHeap.h	/^class MxHeap : private MxDynBlock<MxHeapable *>$/;"	c
MxHeap	plane-opt/mesh_partition/myheap.h	/^    MxHeap() { data.reserve(8); }$/;"	f	class:MxHeap
MxHeap	plane-opt/mesh_partition/myheap.h	/^    MxHeap(unsigned int n) { data.resize(n); }$/;"	f	class:MxHeap
MxHeap	plane-opt/mesh_partition/myheap.h	/^class MxHeap$/;"	c
MxHeapable	plane-opt/mesh_partition/heap/MxHeap.h	/^    MxHeapable()$/;"	f	class:MxHeapable
MxHeapable	plane-opt/mesh_partition/heap/MxHeap.h	/^class MxHeapable$/;"	c
MxHeapable	plane-opt/mesh_partition/myheap.h	/^    MxHeapable()$/;"	f	class:MxHeapable
MxHeapable	plane-opt/mesh_partition/myheap.h	/^class MxHeapable$/;"	c
MxMsgInfo	plane-opt/mesh_partition/heap/mixmsg.h	/^class MxMsgInfo$/;"	c
MxSeverityLevel	plane-opt/mesh_partition/heap/mixmsg.h	/^enum MxSeverityLevel$/;"	g
MxSizedDynBlock	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    MxSizedDynBlock(uint n = T_SIZE) : MxDynBlock<T>(n) {}$/;"	f	class:MxSizedDynBlock
MxSizedDynBlock	plane-opt/mesh_partition/heap/MxDynBlock.h	/^class MxSizedDynBlock : public MxDynBlock<T>$/;"	c
N	plane-opt/mesh_partition/heap/MxBlock.h	/^    int N;$/;"	m	class:MxBlock
PARANOID	plane-opt/mesh_partition/heap/stdmix.h	94;"	d
PARANOID	plane-opt/mesh_partition/heap/stdmix.h	97;"	d
PARTITION_H	plane-opt/mesh_partition/partition.h	2;"	d
PRECAUTION	plane-opt/mesh_partition/heap/stdmix.h	102;"	d
PRECAUTION	plane-opt/mesh_partition/heap/stdmix.h	105;"	d
Partition	plane-opt/mesh_partition/partition.cpp	/^Partition::Partition()$/;"	f	class:Partition
Partition	plane-opt/mesh_partition/partition.h	/^class Partition$/;"	c
SAFETY	plane-opt/mesh_partition/heap/stdmix.h	72;"	d
STDMIX_INCLUDED	plane-opt/mesh_partition/heap/stdmix.h	2;"	d
SanityCheck	plane-opt/mesh_partition/heap/stdmix.h	93;"	d
SanityCheck	plane-opt/mesh_partition/heap/stdmix.h	96;"	d
SwapFace	plane-opt/mesh_partition/partition.h	/^        SwapFace(int v, int f, int t)$/;"	f	struct:Partition::SwapFace
SwapFace	plane-opt/mesh_partition/partition.h	/^    struct SwapFace$/;"	s	class:Partition
TIMING	plane-opt/mesh_partition/heap/gfx.h	88;"	d
TOOLS_H	plane-opt/common/tools.h	2;"	d
Vertex	plane-opt/mesh_partition/partition.h	/^        Vertex() : is_valid(true), cluster_id(-1) {}$/;"	f	struct:Partition::Vertex
Vertex	plane-opt/mesh_partition/partition.h	/^    struct Vertex$/;"	s	class:Partition
W	plane-opt/mesh_partition/heap/stdmix.h	/^enum Axis {X=0, Y=1, Z=2, W=3};$/;"	e	enum:Axis
X	plane-opt/mesh_partition/heap/stdmix.h	/^enum Axis {X=0, Y=1, Z=2, W=3};$/;"	e	enum:Axis
Y	plane-opt/mesh_partition/heap/stdmix.h	/^enum Axis {X=0, Y=1, Z=2, W=3};$/;"	e	enum:Axis
Z	plane-opt/mesh_partition/heap/stdmix.h	/^enum Axis {X=0, Y=1, Z=2, W=3};$/;"	e	enum:Axis
_array_alloc_policy	plane-opt/mesh_partition/heap/MxBlock.h	/^enum _array_alloc_policy$/;"	g
add	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    T& add()$/;"	f	class:MxDynBlock
add	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    void add(const T& t) { add() = t; }$/;"	f	class:MxDynBlock
applyFaceEdgeContraction	plane-opt/mesh_partition/partition.cpp	/^void Partition::applyFaceEdgeContraction(Edge* edge)$/;"	f	class:Partition
area_	plane-opt/mesh_partition/covariance.h	/^    double area_;$/;"	m	class:CovObj
assert	plane-opt/mesh_partition/heap/stdmix.h	80;"	d
assert	plane-opt/mesh_partition/heap/stdmix.h	84;"	d
assert	plane-opt/mesh_partition/heap/stdmix.h	88;"	d
begin	plane-opt/mesh_partition/heap/MxBlock.h	/^    const_iterator begin() const { return block; }$/;"	f	class:MxBlock
begin	plane-opt/mesh_partition/heap/MxBlock.h	/^    iterator begin() { return block; }$/;"	f	class:MxBlock
bitcopy	plane-opt/mesh_partition/heap/MxBlock.h	/^    void bitcopy(const MxBlock<T> &b) { bitcopy(b, b.length()); }$/;"	f	class:MxBlock
bitcopy	plane-opt/mesh_partition/heap/MxBlock.h	/^    void bitcopy(const T *a, int n)  \/\/ copy bits directly$/;"	f	class:MxBlock
block	plane-opt/mesh_partition/heap/MxBlock.h	/^    T *block;$/;"	m	class:MxBlock
center_	plane-opt/mesh_partition/covariance.h	/^    Vector3d center_;$/;"	m	class:CovObj
center_	plane-opt/mesh_partition/partition.h	/^    Vector3d center_, maxcoord_, mincoord_;  \/\/ bounding box$/;"	m	class:Partition
clearCov	plane-opt/mesh_partition/covariance.cpp	/^void CovObj::clearCov()$/;"	f	class:CovObj
cluster_id	plane-opt/mesh_partition/partition.h	/^        int cluster_id;$/;"	m	struct:Partition::Face
cluster_id	plane-opt/mesh_partition/partition.h	/^        int cluster_id;$/;"	m	struct:Partition::Vertex
clusters_	plane-opt/mesh_partition/partition.h	/^    vector<Cluster> clusters_;$/;"	m	class:Partition
clusters_in_swap_	plane-opt/mesh_partition/partition.h	/^    unordered_set<int> clusters_in_swap_, last_clusters_in_swap_;$/;"	m	class:Partition
color	plane-opt/mesh_partition/partition.h	/^        Vector3f color;$/;"	m	struct:Partition::Cluster
color	plane-opt/mesh_partition/partition.h	/^        Vector3f color;$/;"	m	struct:Partition::Vertex
computeAvgDisBtwTwoPlanes	plane-opt/mesh_partition/partition.cpp	/^double Partition::computeAvgDisBtwTwoPlanes(int c1, int c2)$/;"	f	class:Partition
computeEdgeEnergy	plane-opt/mesh_partition/partition.cpp	/^void Partition::computeEdgeEnergy(Edge* edge)$/;"	f	class:Partition
computeMaxDisBetweenTwoPlanes	plane-opt/mesh_partition/partition.cpp	/^double Partition::computeMaxDisBetweenTwoPlanes(int c1, int c2, bool flag_use_projection)$/;"	f	class:Partition
computePlaneNormal	plane-opt/mesh_partition/covariance.cpp	/^void CovObj::computePlaneNormal()$/;"	f	class:CovObj
computeSwapDeltaEnergy	plane-opt/mesh_partition/partition.cpp	/^double Partition::computeSwapDeltaEnergy(int fidx, int from, int to)$/;"	f	class:Partition
const_iterator	plane-opt/mesh_partition/heap/MxBlock.h	/^    typedef value_type *const_iterator;$/;"	t	class:MxBlock
context	plane-opt/mesh_partition/heap/mixmsg.h	/^    const char *context;$/;"	m	class:MxMsgInfo
copy	plane-opt/mesh_partition/heap/MxBlock.h	/^    void copy(const MxBlock<T> &b) { copy(b, b.length()); }$/;"	f	class:MxBlock
copy	plane-opt/mesh_partition/heap/MxBlock.h	/^    void copy(const T *a, const int n)  \/\/ copy using assignment operator$/;"	f	class:MxBlock
cov	plane-opt/mesh_partition/partition.h	/^        CovObj cov;$/;"	m	struct:Partition::Cluster
cov	plane-opt/mesh_partition/partition.h	/^        CovObj cov;$/;"	m	struct:Partition::Face
cov_	plane-opt/mesh_partition/covariance.h	/^    Matrix3d cov_;$/;"	m	class:CovObj
createClusterColors	plane-opt/mesh_partition/partition.cpp	/^void Partition::createClusterColors()$/;"	f	class:Partition
curr_cluster_num_	plane-opt/mesh_partition/partition.h	/^    int init_cluster_num_, curr_cluster_num_, target_cluster_num_;$/;"	m	class:Partition
data	plane-opt/mesh_partition/myheap.h	/^    std::vector<MxHeapable *> data;  \/\/ we keep the pointers in the heap$/;"	m	class:MxHeap
destroy	plane-opt/mesh_partition/myheap.h	/^    void destroy()$/;"	f	class:MxHeap
downheap	plane-opt/mesh_partition/heap/MxHeap.cxx	/^void MxHeap::downheap(unsigned int i)$/;"	f	class:MxHeap
downheap	plane-opt/mesh_partition/myheap.h	/^    void downheap(unsigned int i)$/;"	f	class:MxHeap
drop	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    T& drop() { return (*this)[--fill]; }$/;"	f	class:MxDynBlock
drop	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    void drop(int d) { fill -= d; }$/;"	f	class:MxDynBlock
edges	plane-opt/mesh_partition/partition.h	/^        vector<Edge*> edges;$/;"	m	struct:Partition::Cluster
end	plane-opt/mesh_partition/heap/MxBlock.h	/^    const_iterator end() const { return begin() + size(); }$/;"	f	class:MxBlock
end	plane-opt/mesh_partition/heap/MxBlock.h	/^    iterator end() { return begin() + size(); }$/;"	f	class:MxBlock
end	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    typename MxBlock<T>::const_iterator end() const { return this->begin() + size(); }$/;"	f	class:MxDynBlock
end	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    typename MxBlock<T>::iterator end() { return this->begin() + size(); }$/;"	f	class:MxDynBlock
energy	plane-opt/mesh_partition/covariance.cpp	/^double CovObj::energy()$/;"	f	class:CovObj
energy	plane-opt/mesh_partition/partition.h	/^        double energy;             \/\/ to save some computation time of calling CovObj::energy() too frequently$/;"	m	struct:Partition::Cluster
extract	plane-opt/mesh_partition/heap/MxHeap.cxx	/^MxHeapable *MxHeap::extract()$/;"	f	class:MxHeap
extract	plane-opt/mesh_partition/myheap.h	/^    MxHeapable *extract()$/;"	f	class:MxHeap
face_id	plane-opt/mesh_partition/partition.h	/^        int face_id;$/;"	m	struct:Partition::SwapFace
face_num_	plane-opt/mesh_partition/partition.h	/^    int vertex_num_, face_num_;$/;"	m	class:Partition
faces	plane-opt/mesh_partition/partition.h	/^        unordered_set<int> faces;  \/\/ faces each cluster contains$/;"	m	struct:Partition::Cluster
faces_	plane-opt/mesh_partition/partition.h	/^    vector<Face> faces_;$/;"	m	class:Partition
faces_to_swap	plane-opt/mesh_partition/partition.h	/^        vector<SwapFace> faces_to_swap;$/;"	m	struct:Partition::Cluster
fatal_error	plane-opt/mesh_partition/heap/stdmix.h	77;"	d
filename	plane-opt/mesh_partition/heap/mixmsg.h	/^    const char *filename;$/;"	m	class:MxMsgInfo
fill	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    int fill;$/;"	m	class:MxDynBlock
findClusterNeighbors	plane-opt/mesh_partition/partition.cpp	/^int Partition::findClusterNeighbors(int cidx)$/;"	f	class:Partition
findClusterNeighbors	plane-opt/mesh_partition/partition.cpp	/^int Partition::findClusterNeighbors(int cidx, unordered_set<int>& cluster_faces, unordered_set<int>& neighbor_clusters)$/;"	f	class:Partition
flag_read_cluster_file_	plane-opt/mesh_partition/partition.h	/^    bool flag_read_cluster_file_;$/;"	m	class:Partition
free_block	plane-opt/mesh_partition/heap/MxBlock.h	/^    void free_block()$/;"	f	class:MxBlock
from	plane-opt/mesh_partition/partition.h	/^        int from;$/;"	m	struct:Partition::SwapFace
getCurrentClusterNum	plane-opt/mesh_partition/partition.h	/^    int getCurrentClusterNum() { return curr_cluster_num_; }$/;"	f	class:Partition
getTotalEnergy	plane-opt/mesh_partition/partition.cpp	/^double Partition::getTotalEnergy()$/;"	f	class:Partition
get_heap_pos	plane-opt/mesh_partition/heap/MxHeap.h	/^    inline int get_heap_pos() { return token; }$/;"	f	class:MxHeapable
get_heap_pos	plane-opt/mesh_partition/myheap.h	/^    inline int get_heap_pos() { return token; }$/;"	f	class:MxHeapable
heap_	plane-opt/mesh_partition/partition.h	/^    MxHeap heap_;$/;"	m	class:Partition
heap_key	plane-opt/mesh_partition/heap/MxHeap.h	/^    inline double heap_key() const { return import; }$/;"	f	class:MxHeapable
heap_key	plane-opt/mesh_partition/heap/MxHeap.h	/^    inline void heap_key(double k) { import = k; }$/;"	f	class:MxHeapable
heap_key	plane-opt/mesh_partition/myheap.h	/^    inline double heap_key() const { return import; }$/;"	f	class:MxHeapable
heap_key	plane-opt/mesh_partition/myheap.h	/^    inline void heap_key(double k) { import = k; }$/;"	f	class:MxHeapable
import	plane-opt/mesh_partition/heap/MxHeap.h	/^    double import;$/;"	m	class:MxHeapable
import	plane-opt/mesh_partition/myheap.h	/^    double import;  \/\/ key (sorted by this value in the heap)$/;"	m	class:MxHeapable
indices	plane-opt/mesh_partition/partition.h	/^        int indices[3];$/;"	m	struct:Partition::Face
initMerging	plane-opt/mesh_partition/partition.cpp	/^void Partition::initMerging()$/;"	f	class:Partition
initVerticesAndFaces	plane-opt/mesh_partition/partition.cpp	/^void Partition::initVerticesAndFaces()$/;"	f	class:Partition
init_block	plane-opt/mesh_partition/heap/MxBlock.h	/^    void init_block(int n)$/;"	f	class:MxBlock
init_cluster_num_	plane-opt/mesh_partition/partition.h	/^    int init_cluster_num_, curr_cluster_num_, target_cluster_num_;$/;"	m	class:Partition
insert	plane-opt/mesh_partition/heap/MxHeap.cxx	/^void MxHeap::insert(MxHeapable *t, double v)$/;"	f	class:MxHeap
insert	plane-opt/mesh_partition/heap/MxHeap.h	/^    void insert(MxHeapable *t) { insert(t, t->heap_key()); }$/;"	f	class:MxHeap
insert	plane-opt/mesh_partition/myheap.h	/^    void insert(MxHeapable *t) { insert(t, t->heap_key()); }$/;"	f	class:MxHeap
insert	plane-opt/mesh_partition/myheap.h	/^    void insert(MxHeapable *t, double v)$/;"	f	class:MxHeap
isClusterValid	plane-opt/mesh_partition/partition.h	/^    bool isClusterValid(int cidx) { return !clusters_[cidx].faces.empty(); }$/;"	f	class:Partition
is_in_heap	plane-opt/mesh_partition/heap/MxHeap.h	/^    inline bool is_in_heap() { return token != -47; }$/;"	f	class:MxHeapable
is_in_heap	plane-opt/mesh_partition/myheap.h	/^    inline bool is_in_heap() { return token != -47; }$/;"	f	class:MxHeapable
is_valid	plane-opt/mesh_partition/partition.h	/^        bool is_valid;$/;"	m	struct:Partition::Vertex
is_visited	plane-opt/mesh_partition/partition.h	/^        bool is_visited;  \/\/ used in Breath-first search to get connected components in clusters$/;"	m	struct:Partition::Face
item	plane-opt/mesh_partition/heap/MxHeap.h	/^    MxHeapable *item(uint i) { return (*this)[i]; }$/;"	f	class:MxHeap
item	plane-opt/mesh_partition/heap/MxHeap.h	/^    const MxHeapable *item(uint i) const { return (*this)[i]; }$/;"	f	class:MxHeap
item	plane-opt/mesh_partition/myheap.h	/^    MxHeapable *item(unsigned int i) { return data[i]; }$/;"	f	class:MxHeap
item	plane-opt/mesh_partition/myheap.h	/^    const MxHeapable *item(unsigned int i) const { return data[i]; }$/;"	f	class:MxHeap
iterator	plane-opt/mesh_partition/heap/MxBlock.h	/^    typedef value_type *iterator;$/;"	t	class:MxBlock
kPI	plane-opt/mesh_partition/partition.cpp	/^const double kPI = 3.1415926;$/;"	v
last	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    T& last() { return (*this)[last_id()]; }$/;"	f	class:MxDynBlock
last	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    const T& last() const { return (*this)[last_id()]; }$/;"	f	class:MxDynBlock
last_clusters_in_swap_	plane-opt/mesh_partition/partition.h	/^    unordered_set<int> clusters_in_swap_, last_clusters_in_swap_;$/;"	m	class:Partition
last_id	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    int last_id() const { return fill - 1; }$/;"	f	class:MxDynBlock
left	plane-opt/mesh_partition/heap/MxHeap.h	/^    unsigned int left(unsigned int i) { return 2 * i + 1; }$/;"	f	class:MxHeap
left	plane-opt/mesh_partition/myheap.h	/^    unsigned int left(unsigned int i) { return 2 * i + 1; }$/;"	f	class:MxHeap
length	plane-opt/mesh_partition/heap/MxBlock.h	/^    int length() const { return N; }$/;"	f	class:MxBlock
length	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    int length() const { return fill; }$/;"	f	class:MxDynBlock
length	plane-opt/mesh_partition/myheap.h	/^    unsigned int length() const {return static_cast<unsigned int>(data.size()); }$/;"	f	class:MxHeap
line	plane-opt/mesh_partition/heap/mixmsg.h	/^    int line;$/;"	m	class:MxMsgInfo
main	plane-opt/mesh_partition/main.cpp	/^int main(int argc, char** argv)$/;"	f
maxcoord_	plane-opt/mesh_partition/partition.h	/^    Vector3d center_, maxcoord_, mincoord_;  \/\/ bounding box$/;"	m	class:Partition
mergeAdjacentPlanes	plane-opt/mesh_partition/partition.cpp	/^void Partition::mergeAdjacentPlanes()$/;"	f	class:Partition
mergeClusters	plane-opt/mesh_partition/partition.cpp	/^void Partition::mergeClusters(int c1, int c2)$/;"	f	class:Partition
mergeIslandComponentsInCluster	plane-opt/mesh_partition/partition.cpp	/^void Partition::mergeIslandComponentsInCluster(int original_cidx, vector<unordered_set<int>>& connected_components)$/;"	f	class:Partition
mergeOnce	plane-opt/mesh_partition/partition.cpp	/^bool Partition::mergeOnce()$/;"	f	class:Partition
message	plane-opt/mesh_partition/heap/mixmsg.h	/^    const char *message;$/;"	m	class:MxMsgInfo
mincoord_	plane-opt/mesh_partition/partition.h	/^    Vector3d center_, maxcoord_, mincoord_;  \/\/ bounding box$/;"	m	class:Partition
mxmsg_handler	plane-opt/mesh_partition/heap/mixmsg.h	/^typedef bool (*mxmsg_handler)(MxMsgInfo *);$/;"	t
nbr_clusters	plane-opt/mesh_partition/partition.h	/^        unordered_set<int> nbr_clusters;$/;"	m	struct:Partition::Cluster
nbr_faces	plane-opt/mesh_partition/partition.h	/^        unordered_set<int> nbr_faces;$/;"	m	struct:Partition::Face
nbr_faces	plane-opt/mesh_partition/partition.h	/^        unordered_set<int> nbr_vertices, nbr_faces;  \/\/ neighbors$/;"	m	struct:Partition::Vertex
nbr_vertices	plane-opt/mesh_partition/partition.h	/^        unordered_set<int> nbr_vertices, nbr_faces;  \/\/ neighbors$/;"	m	struct:Partition::Vertex
normal_	plane-opt/mesh_partition/covariance.h	/^    Vector3d normal_;$/;"	m	class:CovObj
not_in_heap	plane-opt/mesh_partition/heap/MxHeap.h	/^    inline void not_in_heap() { token = -47; }$/;"	f	class:MxHeapable
not_in_heap	plane-opt/mesh_partition/myheap.h	/^    inline void not_in_heap() { token = -47; }$/;"	f	class:MxHeapable
operator ()	plane-opt/mesh_partition/heap/MxBlock.h	/^    T &operator()(int i) { return (*this)[i]; }$/;"	f	class:MxBlock
operator ()	plane-opt/mesh_partition/heap/MxBlock.h	/^    const T &operator()(int i) const { return (*this)[i]; }$/;"	f	class:MxBlock
operator +=	plane-opt/mesh_partition/covariance.cpp	/^CovObj &CovObj::operator+=(const CovObj &Q)$/;"	f	class:CovObj
operator -=	plane-opt/mesh_partition/covariance.cpp	/^CovObj &CovObj::operator-=(const CovObj &Q)$/;"	f	class:CovObj
operator =	plane-opt/mesh_partition/covariance.cpp	/^CovObj &CovObj::operator=(const CovObj &Q)$/;"	f	class:CovObj
operator ==	plane-opt/mesh_partition/covariance.cpp	/^bool CovObj::operator==(const CovObj &Q)$/;"	f	class:CovObj
operator T *	plane-opt/mesh_partition/heap/MxBlock.h	/^    operator T *() { return block; }$/;"	f	class:MxBlock
operator []	plane-opt/mesh_partition/heap/MxBlock.h	/^    T &operator[](int i) { return block[i]; }$/;"	f	class:MxBlock
operator []	plane-opt/mesh_partition/heap/MxBlock.h	/^    const T &operator[](int i) const { return block[i]; }$/;"	f	class:MxBlock
operator const T *	plane-opt/mesh_partition/heap/MxBlock.h	/^    operator const T *() const { return block; }$/;"	f	class:MxBlock
operator const T *	plane-opt/mesh_partition/heap/MxBlock.h	/^    operator const T *() { return block; }$/;"	f	class:MxBlock
operator delete	plane-opt/mesh_partition/heap/MxBlock.h	/^inline void operator delete(void *mem, void *spot, _array_alloc_policy) {}$/;"	f
operator new	plane-opt/mesh_partition/heap/MxBlock.h	/^inline void *operator new(size_t, void *p, _array_alloc_policy)$/;"	f
parent	plane-opt/mesh_partition/heap/MxHeap.h	/^    unsigned int parent(unsigned int i) { return (i - 1) \/ 2; }$/;"	f	class:MxHeap
parent	plane-opt/mesh_partition/myheap.h	/^    unsigned int parent(unsigned int i) { return (i - 1) \/ 2; }$/;"	f	class:MxHeap
place	plane-opt/mesh_partition/heap/MxHeap.cxx	/^inline void MxHeap::place(MxHeapable *x, unsigned int i)$/;"	f	class:MxHeap
place	plane-opt/mesh_partition/myheap.h	/^    void place(MxHeapable *x, unsigned int i)$/;"	f	class:MxHeap
pop	plane-opt/mesh_partition/myheap.h	/^    MxHeapable *pop() { return extract(); }$/;"	f	class:MxHeap
printInBlue	plane-opt/common/tools.h	/^inline void printInBlue(const std::string& str)$/;"	f
printInColor	plane-opt/common/tools.h	/^inline void printInColor(const std::string& str, const std::string& color)$/;"	f
printInCyan	plane-opt/common/tools.h	/^inline void printInCyan(const std::string& str)$/;"	f
printInGreen	plane-opt/common/tools.h	/^inline void printInGreen(const std::string& str)$/;"	f
printInMagenta	plane-opt/common/tools.h	/^inline void printInMagenta(const std::string& str)$/;"	f
printInRed	plane-opt/common/tools.h	/^inline void printInRed(const std::string& str)$/;"	f
printInYellow	plane-opt/common/tools.h	/^inline void printInYellow(const std::string& str)$/;"	f
printModelInfo	plane-opt/mesh_partition/partition.h	/^    void printModelInfo() { cout << "#Vertices: " << vertices_.size() << ", #Faces: " << faces_.size() << endl; }$/;"	f	class:Partition
printProgressBar	plane-opt/common/tools.h	/^inline void printProgressBar(float progress)$/;"	f
processIslandClusters	plane-opt/mesh_partition/partition.cpp	/^void Partition::processIslandClusters()$/;"	f	class:Partition
pt	plane-opt/mesh_partition/partition.h	/^        Vector3d pt;$/;"	m	struct:Partition::Vertex
push_back	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    void push_back(const T& t) { add(t); }$/;"	f	class:MxDynBlock
random1	plane-opt/mesh_partition/heap/gfx.h	/^  inline double random1() { return (double)rand() \/ (double)RAND_MAX; }$/;"	f
random1	plane-opt/mesh_partition/heap/gfx.h	/^  inline double random1() { return (double)random() \/ (double)LONG_MAX; }$/;"	f
random_byte	plane-opt/mesh_partition/heap/gfx.h	/^  inline char   random_byte() { return (char)(rand() & 0xff); }$/;"	f
random_byte	plane-opt/mesh_partition/heap/gfx.h	/^  inline char   random_byte() { return (char)(random() & 0xff); }$/;"	f
readClusterFile	plane-opt/mesh_partition/partition.cpp	/^bool Partition::readClusterFile(const std::string& filename)$/;"	f	class:Partition
readPLY	plane-opt/mesh_partition/partition.cpp	/^bool Partition::readPLY(const std::string& filename)$/;"	f	class:Partition
ref	plane-opt/mesh_partition/heap/MxHeap.cxx	14;"	d	file:
remove	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    void remove(int i) { (*this)[i] = (*this)[--fill]; }$/;"	f	class:MxDynBlock
remove	plane-opt/mesh_partition/heap/MxHeap.cxx	/^MxHeapable *MxHeap::remove(MxHeapable *t)$/;"	f	class:MxHeap
remove	plane-opt/mesh_partition/myheap.h	/^    MxHeapable *remove(MxHeapable *t)$/;"	f	class:MxHeap
removeEdgeFromCluster	plane-opt/mesh_partition/partition.cpp	/^bool Partition::removeEdgeFromCluster(int cidx, Edge* edge)$/;"	f	class:Partition
remove_inorder	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    void remove_inorder(int i) { memmove(&(*this)[i], &(*this)[i + 1], (--fill - i) * sizeof(T)); }$/;"	f	class:MxDynBlock
reset	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    void reset() { fill = 0; }$/;"	f	class:MxDynBlock
resize	plane-opt/mesh_partition/heap/MxBlock.h	/^    void resize(int n) { resize_block(n); }$/;"	f	class:MxBlock
resize_block	plane-opt/mesh_partition/heap/MxBlock.h	/^    void resize_block(int n)$/;"	f	class:MxBlock
right	plane-opt/mesh_partition/heap/MxHeap.h	/^    unsigned int right(unsigned int i) { return 2 * i + 2; }$/;"	f	class:MxHeap
right	plane-opt/mesh_partition/myheap.h	/^    unsigned int right(unsigned int i) { return 2 * i + 2; }$/;"	f	class:MxHeap
rint	plane-opt/mesh_partition/heap/gfx.h	/^inline double rint(double x) { return floor(x + 0.5); }$/;"	f
room_for	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    void room_for(int len)$/;"	f	class:MxDynBlock
runMerging	plane-opt/mesh_partition/partition.cpp	/^bool Partition::runMerging()$/;"	f	class:Partition
runPartitionPipeline	plane-opt/mesh_partition/partition.cpp	/^bool Partition::runPartitionPipeline()$/;"	f	class:Partition
runSwapping	plane-opt/mesh_partition/partition.cpp	/^void Partition::runSwapping()$/;"	f	class:Partition
setTargetClusterNum	plane-opt/mesh_partition/partition.h	/^    void setTargetClusterNum(int num) { target_cluster_num_ = num; }$/;"	f	class:Partition
set_heap_pos	plane-opt/mesh_partition/heap/MxHeap.h	/^    inline void set_heap_pos(int t) { token = t; }$/;"	f	class:MxHeapable
set_heap_pos	plane-opt/mesh_partition/myheap.h	/^    inline void set_heap_pos(int t) { token = t; }$/;"	f	class:MxHeapable
severity	plane-opt/mesh_partition/heap/mixmsg.h	/^    MxSeverityLevel severity;$/;"	m	class:MxMsgInfo
size	plane-opt/mesh_partition/heap/MxBlock.h	/^    int size() const { return length(); }$/;"	f	class:MxBlock
size	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    int size() const { return length(); }$/;"	f	class:MxDynBlock
size	plane-opt/mesh_partition/heap/MxHeap.h	/^    unsigned int size() const { return length(); }$/;"	f	class:MxHeap
size	plane-opt/mesh_partition/myheap.h	/^    unsigned int size() const { return static_cast<unsigned int>(data.size()); }$/;"	f	class:MxHeap
size_	plane-opt/mesh_partition/covariance.h	/^    int size_;$/;"	m	class:CovObj
splitCluster	plane-opt/mesh_partition/partition.cpp	/^int Partition::splitCluster(int cidx, vector<unordered_set<int>>& connected_components)$/;"	f	class:Partition
streq	plane-opt/mesh_partition/heap/stdmix.h	/^inline bool streq(const char *a, const char *b) { return !strcmp(a,b); }$/;"	f
swap	plane-opt/mesh_partition/heap/MxHeap.cxx	/^void MxHeap::swap(unsigned int i, unsigned int j)$/;"	f	class:MxHeap
swap	plane-opt/mesh_partition/myheap.h	/^    void swap(unsigned int i, unsigned int j)$/;"	f	class:MxHeap
swapOnce	plane-opt/mesh_partition/partition.cpp	/^int Partition::swapOnce()$/;"	f	class:Partition
target_cluster_num_	plane-opt/mesh_partition/partition.h	/^    int init_cluster_num_, curr_cluster_num_, target_cluster_num_;$/;"	m	class:Partition
to	plane-opt/mesh_partition/partition.h	/^        int to;$/;"	m	struct:Partition::SwapFace
token	plane-opt/mesh_partition/heap/MxHeap.h	/^    int token;$/;"	m	class:MxHeapable
token	plane-opt/mesh_partition/myheap.h	/^    int token;      \/\/ position in the heap$/;"	m	class:MxHeapable
top	plane-opt/mesh_partition/heap/MxHeap.h	/^    MxHeapable *top() { return (length() < 1 ? (MxHeapable *)NULL : item(0)); }$/;"	f	class:MxHeap
top	plane-opt/mesh_partition/myheap.h	/^    MxHeapable *top() { return (length() < 1 ? nullptr : data[0]); }$/;"	f	class:MxHeap
total_energy_	plane-opt/mesh_partition/partition.h	/^    double total_energy_;$/;"	m	class:Partition
total_space	plane-opt/mesh_partition/heap/MxDynBlock.h	/^    int total_space() const { return MxBlock<T>::length(); }$/;"	f	class:MxDynBlock
traverseFaceBFS	plane-opt/mesh_partition/partition.cpp	/^int Partition::traverseFaceBFS(int start_fidx, int start_cidx, unordered_set<int>& component)$/;"	f	class:Partition
uint	plane-opt/mesh_partition/heap/MxBlock.h	/^typedef unsigned int uint;$/;"	t
uint	plane-opt/mesh_partition/heap/stdmix.h	/^typedef unsigned int uint;$/;"	t
update	plane-opt/mesh_partition/heap/MxHeap.cxx	/^void MxHeap::update(MxHeapable *t, double v)$/;"	f	class:MxHeap
update	plane-opt/mesh_partition/heap/MxHeap.h	/^    void update(MxHeapable *t) { update(t, t->heap_key()); }$/;"	f	class:MxHeap
update	plane-opt/mesh_partition/myheap.h	/^    bool update(MxHeapable *t) { return update(t, t->heap_key()); }$/;"	f	class:MxHeap
update	plane-opt/mesh_partition/myheap.h	/^    bool update(MxHeapable *t, double v)$/;"	f	class:MxHeap
updateCurrentClusterNum	plane-opt/mesh_partition/partition.cpp	/^void Partition::updateCurrentClusterNum()$/;"	f	class:Partition
upheap	plane-opt/mesh_partition/heap/MxHeap.cxx	/^void MxHeap::upheap(unsigned int i)$/;"	f	class:MxHeap
upheap	plane-opt/mesh_partition/myheap.h	/^    void upheap(unsigned int i)$/;"	f	class:MxHeap
ushort	plane-opt/mesh_partition/heap/stdmix.h	/^typedef unsigned short ushort;$/;"	t
v1	plane-opt/mesh_partition/partition.h	/^        int v1, v2;$/;"	m	struct:Partition::Edge
v2	plane-opt/mesh_partition/partition.h	/^        int v1, v2;$/;"	m	struct:Partition::Edge
value_type	plane-opt/mesh_partition/heap/MxBlock.h	/^    typedef T value_type;$/;"	t	class:MxBlock
varray_find	plane-opt/mesh_partition/heap/MxDynBlock.h	/^inline bool varray_find(const MxDynBlock<T>& A, const T& t, uint* index = NULL)$/;"	f
vertex_num_	plane-opt/mesh_partition/partition.h	/^    int vertex_num_, face_num_;$/;"	m	class:Partition
vertices_	plane-opt/mesh_partition/partition.h	/^    vector<Vertex> vertices_;$/;"	m	class:Partition
writeClusterFile	plane-opt/mesh_partition/partition.cpp	/^void Partition::writeClusterFile(const std::string& filename)$/;"	f	class:Partition
writePLY	plane-opt/mesh_partition/partition.cpp	/^bool Partition::writePLY(const std::string& filename)$/;"	f	class:Partition
~MxBlock	plane-opt/mesh_partition/heap/MxBlock.h	/^    ~MxBlock() { free_block(); }$/;"	f	class:MxBlock
~Partition	plane-opt/mesh_partition/partition.cpp	/^Partition::~Partition()$/;"	f	class:Partition
